#lang rhombus
import:
  "check.rhm" open

begin:
  syntax.class Arithmetic
  | '$x + $y'

  check:
    ~print
    match '1+2'
    | '$(exp :: Arithmetic)': exp.x
    '1'

  check:
    ~print
    match '1+2'
    | '$(exp :: Arithmetic)': exp.y
    '2'

check:
  ~eval_exn
  syntax.class Arithmetic
  | '$x + $y'
  match '1+2'
  | '$(exp :: Arithmetic)': exp
  "cannot use repetition binding as an expression"

begin:
  syntax.class Arithmetic
  | '$x + $y'
  | '$x - $y'

  check:
    ~print
    match '1+2'
    | '$(exp :: Arithmetic)': exp.x
    '1'

  check:
    ~print
    match '1-2'
    | '$(exp :: Arithmetic)': exp.y
    '2'

begin:
  syntax.class Arithmetic
  | '$x + $y':
      ~attr sum: Syntax.make(Syntax.unwrap(x) + Syntax.unwrap(y))
      ~attr [num, ...]: [x, y]

  check:
    ~print
    match '1+2'
    | '$(exp :: Arithmetic)': exp.sum
    '3'

  check:
    ~print
    match '1+2'
    | '$(exp :: Arithmetic)': [exp.num, ...]
    ['1', '2']

begin:
  syntax.class Foo
  | 'a ($x, ...) z'

  check:
    ~print
    match 'a (1, 2, 3) z'
    | '$(f :: Foo)': [f.x, ...]
    ['1', '2', '3']

  check:
    ~print
    match '[a (1, 2, 3) z, a () z, a ("x", "y") z]'
    | '[$(f :: Foo), ...]': [[f.x, ...], ...]
    [['1', '2', '3'], [], ['"x"', '"y"']]

begin:
  syntax.class Foo
  | 'a $x ...'

  check:
    ~print
    match 'a (1, 2, 3) z'
    | '$(f :: Foo)': [f.x, ...]
    ['(1, 2, 3)', 'z']

// check that right-hand side of pattern
// is in a more nested scope than pattern variables
begin:
  syntax.class Foo
  | 'a $x':
      val x: "whatever"
  check:
    ~print
    match 'a 1'
    | '$(f :: Foo)': f.x
    '1'

// check that syntax class description appears in match error
begin:
  check:
    ~eval_exn
    import:
      rhombus/meta open
    meta:
      syntax.class Arithmetic:
        ~description: "an expression with addition or subtraction"
        ~pattern
        | '$x + $y'
        | '$x - $y'
    expr.macro 'right_operand $(e :: Arithmetic)':
      values(e.y, '')
    right_operand 1 +
    "expression with addition or subtraction"

begin:
  syntax.class Foo
  | '$x + $y'
  | '$x + $y + $z'
  check:
    ~print
    match '1 + 2'
    | '$(f :: Foo)': [f.x, f.y]
    ['1', '2']
  check:
    ~print
    match '10 + 20 + 30'
    | '$(f :: Foo)': [f.x, f.y]
    ['10', '20']

check:
  ~eval_exn
  import:
    rhombus/meta open
  syntax.class Foo
  | '$x + $y'
  | '$x + $y + $z'
  match '10 + 20 + 30'
  | '$(f :: Foo)': f.z
  "attribute not found"

begin:
  syntax.class Foo:
    ~sequence
    ~pattern
    | '$x + $y'
  check:
    ~print
    match '0 + 1 + 2'
    | '0 + $(f :: Foo)': [f.x, f.y]
    ['1', '2']

begin:
  syntax.class Foo:
    ~term
    ~pattern
    | '($x + $y)'
  check:
    ~print
    match '0 + (1 + 2)'
    | '0 + $(f :: Foo)': [f.x, f.y]
    ['1', '2']

check:
  ~eval_exn
  syntax.class Foo:
    ~term
    ~pattern
    | '$x + $y'
  "not a single-term pattern"

begin:
  syntax.class Foo:
    ~group
    ~pattern
    | '$x + $y'
  check:
    ~print
    match '(1 + 2)'
    | '($(f :: Foo))': [f.x, f.y]
    ['1', '2']

begin:
  syntax.class Foo:
    ~group
    ~pattern
    | '$g'
  check:
    ~print
    match '(1 + 2)'
    | '($(f :: Foo))': f.g
    '1 + 2'

begin:
  check:
    ~eval_exn
    syntax.class Foo:
      ~group
      ~pattern
      | '$x + $y'
    match '0 + 1 + 2'
    | '0 + $(f :: Foo)': [f.x, f.y]
    "syntax class incompatible with this context"

begin:
  syntax.class Foo:
    ~multi
    ~pattern
    | '$x + $y
       $z - $w'
  check:
    ~print
    match ': 1 + 2
             3 - 4'
    | ': $(f :: Foo)': [f.x, f.y, f.z, f.w, f]
    ['1', '2', '3', '4', '1 + 2; 3 - 4']
  check:
    ~print
    match '(1 + 2,
            3 - 4)'
    | '($(f :: Foo))': [f.x, f.y, f.z, f.w, f]
    ['1', '2', '3', '4', '1 + 2; 3 - 4']

begin:
  syntax.class Foo:
    ~block
    ~pattern
    | ': $x + $y
         $z - $w'
  check:
    ~print
    match ': 1 + 2
             3 - 4'
    | ': $(f :: Foo)': [f.x, f.y, f.z, f.w, f]
    ['1', '2', '3', '4', ': 1 + 2; 3 - 4']

check:
  ~eval_exn
  syntax.class Foo:
    ~block
    ~pattern
    | '($x + $y,
        $z - $w)'
  "not a block pattern"

begin:
  syntax.class Foo:
    ~multi
    ~pattern
    | '($x, $y)'
  check:
    ~print
    match '((1 + 2, 3 - 4))'
    | '($(f :: Foo))': f
    '(1 + 2, 3 - 4)'
  check:
    match '(1 + 2, 3 - 4)'
    | '($(f :: Foo))': f
    | ~else: "no"
    "no"
  check:
    ~print
    match '(1 + 2, 3 - 4)'
    | '$(f :: Foo)': f
    | ~else: "no"
    '(1 + 2, 3 - 4)'

begin:
  syntax.class Foo:
    ~multi
    ~pattern
    | '$x'
  check:
    ~print
    match '(1 + 2, 3 - 4)'
    | '($(f :: Foo))': f
    '1 + 2; 3 - 4'
  check:
    ~print
    match ': 1 + 2; 3 - 4; 5 / 6'
    | ': $(f :: Foo)': f
    '1 + 2; 3 - 4; 5 / 6'

check:
  ~print
  syntax.class Option:
    ~term
    ~pattern
    | '~lang':
        ~attr form: '~lang'
  match '(~lang, ~lang)'
  | '($(o :: Option), ...)': [o.form, ...]
  ['~lang', '~lang']

check:
  ~print
  syntax.class Option:
    ~pattern
    | '~lang':
        ~attr form: '~lang'
    | '~lang ~and':
        ~attr form: '~and'
  match '(~lang, ~lang ~and)'
  | '($(o :: Option), ...)': [o.form, ...]
  ['~lang', '~and']

check:
  ~eval_exn
  syntax.class Option:
    ~term
    ~pattern
    | '~lang':
        ~attr form: '~lang'
  match '(~lang, ~lang)'
  | '($(o :: Option), ...)': [o.form]
  "attribute is a repetition"

check:
  ~eval_exn
  syntax.class Option:
    ~pattern
    | '~lang':
        ~attr form: '~lang'
  match '(~lang, ~lang)'
  | '($(o :: Option), ...)': [o.form]
  "attribute is a repetition"
