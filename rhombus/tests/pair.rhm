#lang rhombus
import: "check.rhm" open

check:
  Pair(1, 2)
  Pair.cons(1, 2)

check:
  Pair
  Pair.cons

check:
  Pair(1, [2])
  [1, 2]

check:
  val p :: Pair: [1, 2]
  p
  [1, 2]

check:
  ~exn
  Pair.first(1)
  values("contract violation", "expected: Pair")

check:
  ~exn
  Pair("ok", "oops") :: Pair.of(String, Number)
  "does not match annotation"

check:
  ~exn
  ["ok", "oops"] :: Pair.of(String, Number)
  "does not match annotation"

check:
  ["ok", "fine"] :: Pair.of(String, List)
  ["ok", "fine"]

begin:
  use_static
  check:
    Pair(1, 2).first
    1
  check:
    Pair(1, 2).rest
    2
  check:
    Pair.cons(1, 2).first
    1
  check:
    Pair.cons(1, 2).rest
    2
  check:
    val x :: Pair: [1, 2, 3]
    x.first
    1
  check:
    val Pair(x, y): [1, 2, 3]
    x
    1
  check:
    (["ok", "fine"] :: Pair.of(String, List)).rest
    ["fine"]
  check:
    val Pair(x :: List, y): [[1, 2, 3]]
    x.length()
    3
  check:
    (["ok", "fine"] :: Pair.of(String, List)).rest.length()
    1
  check:
    val x :: Pair.of(List, Any): [[1, 2, 3]]
    x.first.length()
    3

begin:
  check:
    dynamic(Pair(1, 2)).first
    1
  check:
    dynamic(Pair(1, 2)).rest
    2
