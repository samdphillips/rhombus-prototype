#lang rhombus
import:
  "check.rhm" open
  racket/base open:
    only: mcons

use_static

class Posn(x, y)

check:
  "apple" == "apple"
  #true

check:
  [1, 2, 3] == 1
  #false

check:
  [1, "apple", {"alice": 97}] == [1, "apple", {"alice": 97}]
  #true

check:
  1 == 1.0
  #false

check:
  "yes" == "yes"
  #true

check:
  "yes" == "no"
  #false

check:
  6 * 7 == 42
  #true

check:
  expt(2, 100) == expt(2, 100)
  #true

check:
  2 == 2.0
  #false

check:
  [1, 2] == [1, 2]
  #true

check:
  begin:
    val v: mcons(1, 2)
    v == v
  #true

check:
  mcons(1, 2) == mcons(1, 2)
  #false

check:
  {[1, 2]: 3}[[1, 2]]
  3

check:
  ~exn
  {mcons(1, 2): 3}[mcons(1, 2)]
  "hash-ref: no value found for key"

begin:
  val a: mcons(1, 2)
  val b: mcons(1, 2)
  val m: {a: "a", b: "b"}
  check:
    m[a]
    "a"
  check:
    m[b]
    "b"

check:
  {[1, 2]}[[1, 2]]
  #true

check:
  {mcons(1, 2)}[mcons(1, 2)]
  #false

check:
  begin:
    val v: mcons(1, 2)
    {v}[v]
  #true

begin:
  val a: mcons(1, 2)
  val b: mcons(1, 2)
  val c: mcons(1, 2)
  val s: {a, b}
  check:
    s[a]
    #true
  check:
    s[b]
    #true
  check:
    s[c]
    #false

// empty map, not empty set
check: {}; Map()
check: {} == Set(); #false
check: Map.empty; {}
check: {"a": 1, "b": 2}; {"b": 2, "a": 1}
begin:
  val a: mcons(1, 2)
  val b: mcons(1, 2)
  check: {a: 1, b: 2}; {b: 2, a: 1}
  check: {a: 1} == {b: 1}; #false
check:
  match {}
  | Map.empty: "Map.empty"
  | _: #false
  "Map.empty"
check:
  match MutableMap()
  | Map.empty: "Map.empty"
  | _: #false
  "Map.empty"
check:
  match {"a": 1}
  | Map.empty: "Map.empty"
  | {}: "{}"
  | _: #false
  "{}"

check: Set.empty; Set()
check:
  match Set()
  | Set.empty: "Set.empty"
  | _: #false
  "Set.empty"
check:
  match MutableSet()
  | Set.empty: "Set.empty"
  | _: #false
  "Set.empty"

def local_map: Map{symbol(alice): Posn(4, 5),
                   symbol(bob): Posn(7, 9)}

fun locale(who, neighborhood :: Map.of(Symbol, Posn)):
  val p: neighborhood[who]
  p.x +& ", " +& p.y

check:
  locale(symbol(alice), local_map)
  "4, 5"

def {symbol(bob): bob_loc}: local_map
check:
  bob_loc
  Posn(7, 9)

def Map{symbol(alice): alice_loc2, symbol(bob): bob_loc2}: local_map
check:
  [alice_loc2, bob_loc2]
  [Posn(4, 5), Posn(7, 9)]

check: Set(); Set()
check: {"a", "b"}; Set("a", "b")
begin:
  val a: mcons(1, 2)
  val b: mcons(1, 2)
  check: {a, b}; {b, a}
  check: {a} == {b}; #false
