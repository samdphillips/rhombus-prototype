#lang rhombus/private/amalgam/core

import:
  "core-meta.rkt" open
  "closeable.rkt" open

export:
  Closeable

namespace Closeable:
  export:
    close
    rename cdef as def  

  fun close(v :: Closeable):
    v.close()

  defn.sequence_macro 'cdef $(bind :: Identifier) = $(rhs :: expr_meta.Parsed)
                       $body
                       ...':
    ~op_stx: self
    def rhs_statinfo = statinfo_meta.gather(rhs)
    def resource = Syntax.make_temp_id("resource")
    def resource_with_statinfo = statinfo_meta.wrap(resource, rhs_statinfo)
    values(
      '
        block:
          def mutable $resource = #false
          try:
            ~initially:
              $resource := ($rhs $('::'.relocate(self)) Closeable)
            block:
              let $bind = $resource_with_statinfo
              #void
              $body
              ...
            ~finally:
              ($resource :~ Closeable).close()
      ',
      '')
